package examples;

//1. Open Example1.java
//2. Compile and execute the application Example1.

/*public class Example1{
	public static void main(String[] args){
			int denominator, numerator, ratio;
			numerator = 5;
			denominator = 2;
			ratio = numerator / denominator;
			System.out.println("The answer is: "+ratio);
			System.out.println("Done."); // Don't move it
	}
}
*/
//What was output by the application when you executed it?
//My answer: output is: The answer is: 2 Done.


//3. Change the value of denominator to 0.
//4. Re-compile and re-execute Example1.

/*public class Example1{
	public static void main(String[] args){
			int denominator, numerator, ratio;
			numerator = 5;
			denominator = 0;
			ratio = numerator / denominator;
			System.out.println("The answer is: "+ratio);
			System.out.println("Done."); // Don't move it
	}
}
*/

//What "error" was generated by the application when you executed it?
/*My answer: Exception in thread "main" java.lang.ArithmeticException: 
  / 
  by zero at practice5/examples.Example1.main(Example1.java:29) 
  cause we cannot divide anything by 0.*/
//Why was this "error" generated at run-time (rather than at compile-time)?
//My answer:because the code itself is correct, but the arithmetic execution is incorrect



/*5. Add a try-catch statement. Specifically, put only the statement that generated the exception inside of 
  the try block and put no statements in the catch block.(Hint: You should be able to determine what exception 
  to catch and what line generated the exception from the error message that you received during the previous step.)
*/

/*public class Example1{
	public static void main(String[] args){
			int denominator, numerator, ratio;
			numerator = 5;
			denominator = 0;
			try {
				ratio = numerator / denominator;
			}catch(ArithmeticException e) {
				
			}
			System.out.println("The answer is: "+ratio);
			System.out.println("Done."); // Don't move it
	}
}
*/

//Re-compile Example1.
//What error is generated and why?
/*My answer:Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	The local variable ratio may not have been initialized

	at practice5/examples.Example1.main(Example1.java:58)
	
	it's cause ratio located outside of the try-catch block and it means that it does not initialized
*/

//6. Move the "output statement" into the try block (as well).
//7. Add the statement System.out.println("Divide by 0."); to the catch block.

/*public class Example1{
	public static void main(String[] args){
			int denominator, numerator, ratio;
			numerator = 5;
			denominator = 0;
			try {
				ratio = numerator / denominator;
				System.out.println("The answer is: "+ratio);
			}catch(ArithmeticException e) {
				System.out.println("Divide by 0.");
			}
			
			System.out.println("Done."); // Don't move it
	}
}
*/
//What output was generated?

/*My answer: Output is: Divide by 0.
Done.
*/

//8. Add a call to the printStackTrace() method of the ArithmeticException to the end of the catch block.
//Re-compile and re-execute Example1.
//What output was generated?
//Did the application execute properly or not?


public class Example1{
	public static void main(String[] args){
			int denominator, numerator, ratio;
			numerator = 5;
			denominator = 0;
			try {
				ratio = numerator / denominator;
				System.out.println("The answer is: "+ratio);
			}catch(ArithmeticException e) {
				System.out.println("Divide by 0.");
				e.printStackTrace();
			}
			
			System.out.println("Done."); // Don't move it
	}
}

/*My answer: Output is: 
 * Divide by 0.
java.lang.ArithmeticException: / by zero
	at practice5/examples.Example1.main(Example1.java:114)
Done.

Первая строка указывает, что произошло деление на ноль.
Вторая строка (стек вызовов) показывает тип исключения и конкретный номер строки, где произошла ошибка.
Наконец, будет напечатано "Done.".
*/
